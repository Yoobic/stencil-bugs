fastlane_version "2.55.0"

default_platform :ios

platform :ios do

  desc "Create a new app in the iTunes connect"
  lane :createNewApp do 
    produce
    cred
  end

  desc "Sync provisioning profile and certificates"
  # run it the first time
  private_lane :cred do
    app_identifier = "com.ipelia.yoobicask"
    # Get certificates
    cert
    # Get provisioning profile
    sigh(
      force: false
    )
  end

  desc "Fetch code sign profiles and certs"
  lane :certificates do
    match(
      type: "development",
      readonly: true
    )
    match(
      type: "adhoc",
      readonly: true
    )
    match(
      type: "appstore",
      readonly: true
    )
  end 

  desc "Create new code sign profiles and certs for new devices"
  lane :newCerts do
    match(
      type: "development",
      force_for_new_devices: true
    )
    match(
      type: "adhoc",
      force_for_new_devices: true
    )
  end 

  desc "Build and code sign debug ipa"
  lane :debugbuild do
    app_name = "Yoobic-Ask"
    ios_workspace_path = "platforms/ios/#{app_name}.xcworkspace"
    gym(scheme: app_name,
      configuration: 'Debug',
      workspace: ios_workspace_path,
      include_bitcode: false,
      output_directory: "bin",
      output_name: "Yoobic-Ask",
      export_xcargs: "-allowProvisioningUpdates",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
          "com.ipelia.yoobicask" => "a54b5f50-078c-42d0-a45e-274a2e6906bf"
        }
      }
    )
  end  

  desc "Build and code sign release ipa"
  lane :build do
    app_name = "Yoobic-Ask"
    ios_workspace_path = "platforms/ios/#{app_name}.xcworkspace"
    gym(scheme: app_name,
      workspace: ios_workspace_path,
      include_bitcode: false,
      output_directory: "bin",
      output_name: "Yoobic-Ask",
      export_xcargs: "-allowProvisioningUpdates",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
          "com.ipelia.yoobicask" => "a54b5f50-078c-42d0-a45e-274a2e6906bf"
        }
      }
    )
  end

  desc "Upload a new version to the App Store"
  lane :uploadRelease do
    deliver(
      force: true,
      ignore_language_directory_validation: true,
      ipa: "bin/yoobic/Boost_store.ipa"
    )
  end

  desc "Testfairy upload notification"
  lane :testfairySlack do
    slack(
      message: "Successfully uploaded a new iOS app to testfairy!",
      channel: "#testfairy",
      slack_url: "https://hooks.slack.com/services/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",
      default_payloads: [:last_git_commit_message],
      attachment_properties: {
       fields: [
              {
                  title: "Application",
                  value: ENV["APPLICATION"]
              },
              {
                  title: "Version Number",
                  value: ENV["versionNumber"]
              },
              {
                  title: "App Id",
                  value: ENV["appId"]
              }
          ]
      }
    )
  end

end

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Code sign android apk"
  lane :signApk do
    app_android_key = 'alias_name'
    sign_apk(
      apk_path: "platforms/android/build/outputs/apk/android-release-unsigned.apk",
      signed_apk_path: "platforms/android/build/outputs/apk/android-release-signed.apk",
      keystore_path: "fastlane/credentials/android.keystore",
      alias: app_android_key
    )
    zipalign(apk_path: "#{lane_context[SharedValues::SIGNED_APK_PATH]}")
  end

  desc "Upload a new version to the Google Play"
  lane :uploadRelease do
    google_play_track_version_codes
    supply(
      track: 'production',
      apk_paths: ["bin/yoobic/Boost_x86_signed.apk", "bin/yoobic/Boost_armv7_signed.apk"]
    )
  end

  desc "Testfairy upload notification"
  lane :testfairySlack do
    slack(
      message: "Successfully uploaded new Android apps to testfairy!",
      channel: "#testfairy",
      slack_url: "https://hooks.slack.com/services/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",
      default_payloads: [:last_git_commit_message],
      attachment_properties: {
       fields: [
              {
                  title: "Application",
                  value: ENV["APPLICATION"]
              },
              {
                  title: "Version Number",
                  value: ENV["versionNumber"]
              },
              {
                  title: "App Id",
                  value: ENV["appId"]
              }
          ]
      }
    )
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end