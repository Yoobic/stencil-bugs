/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  AsyncValidator,
  CardType,
  EntityType,
  FormDisplayType,
  FormStarType,
  IAlgorithm,
  IColumnDefinition,
  IEntity,
  IEntityAction,
  IFile,
  IFormField,
  IFormSearch,
  IGridSearch,
  IItemRanking,
  IPhotoEditorData,
  IRadioGroupEntry,
  ISlide,
  Validator,
  ValidatorEntry,
} from '@shared/interfaces';
import {
  EventEmitter,
} from '@stencil/core';

declare global {

  namespace StencilComponents {
    interface YooFormAutocompleteDialog {
      'displayType': CardType;
      'entityType': EntityType;
      'isLocal': boolean;
      'multiple': boolean;
      'useTranslate': boolean;
      'value': Array<any>;
      'values': any[];
    }
  }

  interface HTMLYooFormAutocompleteDialogElement extends StencilComponents.YooFormAutocompleteDialog, HTMLStencilElement {}

  var HTMLYooFormAutocompleteDialogElement: {
    prototype: HTMLYooFormAutocompleteDialogElement;
    new (): HTMLYooFormAutocompleteDialogElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-autocomplete-dialog': HTMLYooFormAutocompleteDialogElement;
  }
  interface ElementTagNameMap {
    'yoo-form-autocomplete-dialog': HTMLYooFormAutocompleteDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-autocomplete-dialog': JSXElements.YooFormAutocompleteDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormAutocompleteDialogAttributes extends HTMLAttributes {
      'displayType'?: CardType;
      'entityType'?: EntityType;
      'isLocal'?: boolean;
      'multiple'?: boolean;
      'onFetchData'?: (event: CustomEvent<IGridSearch>) => void;
      'useTranslate'?: boolean;
      'value'?: Array<any>;
      'values'?: any[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormAutocomplete {
      'asyncValidators': Array<AsyncValidator<any>>;
      'displayType': CardType;
      'entityType': EntityType;
      'hideContainer': () => void;
      'isValid': () => boolean;
      'multiple': boolean;
      'pageSize': number;
      'placeholder': string;
      'readonly': boolean;
      'required': boolean;
      'updateDialogValues': (values: any) => void;
      'useTranslate': boolean;
      'validators': Array<Validator<any> | ValidatorEntry>;
      'value': Array<any> | any;
      'values': any[];
    }
  }

  interface HTMLYooFormAutocompleteElement extends StencilComponents.YooFormAutocomplete, HTMLStencilElement {}

  var HTMLYooFormAutocompleteElement: {
    prototype: HTMLYooFormAutocompleteElement;
    new (): HTMLYooFormAutocompleteElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-autocomplete': HTMLYooFormAutocompleteElement;
  }
  interface ElementTagNameMap {
    'yoo-form-autocomplete': HTMLYooFormAutocompleteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-autocomplete': JSXElements.YooFormAutocompleteAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormAutocompleteAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<any>>;
      'displayType'?: CardType;
      'entityType'?: EntityType;
      'multiple'?: boolean;
      'onFetchData'?: (event: CustomEvent<IGridSearch>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'pageSize'?: number;
      'placeholder'?: string;
      'readonly'?: boolean;
      'required'?: boolean;
      'useTranslate'?: boolean;
      'validators'?: Array<Validator<any> | ValidatorEntry>;
      'value'?: Array<any> | any;
      'values'?: any[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormButtonChoice {
      'asyncValidators': Array<AsyncValidator<string[]>>;
      'multiple': boolean;
      'readonly': boolean;
      'required': boolean;
      'useTranslate': boolean;
      'validators': Array<Validator<string[]> | ValidatorEntry>;
      'value': Array<string> | string;
      'values': string[];
    }
  }

  interface HTMLYooFormButtonChoiceElement extends StencilComponents.YooFormButtonChoice, HTMLStencilElement {}

  var HTMLYooFormButtonChoiceElement: {
    prototype: HTMLYooFormButtonChoiceElement;
    new (): HTMLYooFormButtonChoiceElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-button-choice': HTMLYooFormButtonChoiceElement;
  }
  interface ElementTagNameMap {
    'yoo-form-button-choice': HTMLYooFormButtonChoiceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-button-choice': JSXElements.YooFormButtonChoiceAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormButtonChoiceAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string[]>>;
      'multiple'?: boolean;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'required'?: boolean;
      'useTranslate'?: boolean;
      'validators'?: Array<Validator<string[]> | ValidatorEntry>;
      'value'?: Array<string> | string;
      'values'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormCheckbox {
      'asyncValidators': Array<AsyncValidator<boolean>>;
      'onCheckboxClick': () => void;
      'readonly': boolean;
      'type': FormDisplayType;
      'validators': Array<Validator<boolean> | ValidatorEntry>;
      'value': boolean;
    }
  }

  interface HTMLYooFormCheckboxElement extends StencilComponents.YooFormCheckbox, HTMLStencilElement {}

  var HTMLYooFormCheckboxElement: {
    prototype: HTMLYooFormCheckboxElement;
    new (): HTMLYooFormCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-checkbox': HTMLYooFormCheckboxElement;
  }
  interface ElementTagNameMap {
    'yoo-form-checkbox': HTMLYooFormCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-checkbox': JSXElements.YooFormCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormCheckboxAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<boolean>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'type'?: FormDisplayType;
      'validators'?: Array<Validator<boolean> | ValidatorEntry>;
      'value'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormChecklist {
      'previousTasks': Array<string>;
    }
  }

  interface HTMLYooFormChecklistElement extends StencilComponents.YooFormChecklist, HTMLStencilElement {}

  var HTMLYooFormChecklistElement: {
    prototype: HTMLYooFormChecklistElement;
    new (): HTMLYooFormChecklistElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-checklist': HTMLYooFormChecklistElement;
  }
  interface ElementTagNameMap {
    'yoo-form-checklist': HTMLYooFormChecklistElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-checklist': JSXElements.YooFormChecklistAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormChecklistAttributes extends HTMLAttributes {
      'previousTasks'?: Array<string>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormColorPicker {
      'color': string;
      'hideLabel': boolean;
    }
  }

  interface HTMLYooFormColorPickerElement extends StencilComponents.YooFormColorPicker, HTMLStencilElement {}

  var HTMLYooFormColorPickerElement: {
    prototype: HTMLYooFormColorPickerElement;
    new (): HTMLYooFormColorPickerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-color-picker': HTMLYooFormColorPickerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-color-picker': HTMLYooFormColorPickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-color-picker': JSXElements.YooFormColorPickerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormColorPickerAttributes extends HTMLAttributes {
      'color'?: string;
      'hideLabel'?: boolean;
      'onColorSelected'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDateTime {
      'iconPrefix': string;
      'iconSuffix': string;
      'isValid': () => boolean;
      'maxDate': Date;
      'minDate': Date;
      'placeholder': string;
      'placeholdertolabel': boolean;
      'readonly': boolean;
      'required': boolean;
      'showInputClear': boolean;
      'type': string;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': any;
    }
  }

  interface HTMLYooFormDateTimeElement extends StencilComponents.YooFormDateTime, HTMLStencilElement {}

  var HTMLYooFormDateTimeElement: {
    prototype: HTMLYooFormDateTimeElement;
    new (): HTMLYooFormDateTimeElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-date-time': HTMLYooFormDateTimeElement;
  }
  interface ElementTagNameMap {
    'yoo-form-date-time': HTMLYooFormDateTimeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-date-time': JSXElements.YooFormDateTimeAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDateTimeAttributes extends HTMLAttributes {
      'iconPrefix'?: string;
      'iconSuffix'?: string;
      'maxDate'?: Date;
      'minDate'?: Date;
      'onIconClicked'?: (event: CustomEvent<string>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'placeholdertolabel'?: boolean;
      'readonly'?: boolean;
      'required'?: boolean;
      'showInputClear'?: boolean;
      'type'?: string;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDocumentDialog {
      'document': IFile;
      'readonly': boolean;
      'type': 'image' | 'document';
    }
  }

  interface HTMLYooFormDocumentDialogElement extends StencilComponents.YooFormDocumentDialog, HTMLStencilElement {}

  var HTMLYooFormDocumentDialogElement: {
    prototype: HTMLYooFormDocumentDialogElement;
    new (): HTMLYooFormDocumentDialogElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-document-dialog': HTMLYooFormDocumentDialogElement;
  }
  interface ElementTagNameMap {
    'yoo-form-document-dialog': HTMLYooFormDocumentDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-document-dialog': JSXElements.YooFormDocumentDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDocumentDialogAttributes extends HTMLAttributes {
      'document'?: IFile;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'type'?: 'image' | 'document';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDocument {
      'document': IFile;
      'isValid': () => boolean;
      'readonly': boolean;
      'type': 'image' | 'document';
    }
  }

  interface HTMLYooFormDocumentElement extends StencilComponents.YooFormDocument, HTMLStencilElement {}

  var HTMLYooFormDocumentElement: {
    prototype: HTMLYooFormDocumentElement;
    new (): HTMLYooFormDocumentElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-document': HTMLYooFormDocumentElement;
  }
  interface ElementTagNameMap {
    'yoo-form-document': HTMLYooFormDocumentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-document': JSXElements.YooFormDocumentAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDocumentAttributes extends HTMLAttributes {
      'document'?: IFile;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'type'?: 'image' | 'document';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDynamicDialog {
      'data': Object;
      'forceReadonly': boolean;
      'isValid': () => boolean;
      'showRecap': boolean;
      'showTabs': boolean;
      'slides': Array<ISlide>;
      'suffix': string;
    }
  }

  interface HTMLYooFormDynamicDialogElement extends StencilComponents.YooFormDynamicDialog, HTMLStencilElement {}

  var HTMLYooFormDynamicDialogElement: {
    prototype: HTMLYooFormDynamicDialogElement;
    new (): HTMLYooFormDynamicDialogElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-dynamic-dialog': HTMLYooFormDynamicDialogElement;
  }
  interface ElementTagNameMap {
    'yoo-form-dynamic-dialog': HTMLYooFormDynamicDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-dynamic-dialog': JSXElements.YooFormDynamicDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDynamicDialogAttributes extends HTMLAttributes {
      'data'?: Object;
      'forceReadonly'?: boolean;
      'showRecap'?: boolean;
      'showTabs'?: boolean;
      'slides'?: Array<ISlide>;
      'suffix'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDynamic {
      'data': Object;
      'forceFieldUpdate': (field: IFormField) => void;
      'forceReadonly': boolean;
      'goToRecap': () => void;
      'isValid': () => boolean;
      'scrollToPoint': (scrollDistance: number) => void;
      'showRecap': boolean;
      'showSave': boolean;
      'showTabs': boolean;
      'slides': Array<ISlide>;
      'suffix': string;
    }
  }

  interface HTMLYooFormDynamicElement extends StencilComponents.YooFormDynamic, HTMLStencilElement {}

  var HTMLYooFormDynamicElement: {
    prototype: HTMLYooFormDynamicElement;
    new (): HTMLYooFormDynamicElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-dynamic': HTMLYooFormDynamicElement;
  }
  interface ElementTagNameMap {
    'yoo-form-dynamic': HTMLYooFormDynamicElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-dynamic': JSXElements.YooFormDynamicAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDynamicAttributes extends HTMLAttributes {
      'data'?: Object;
      'forceReadonly'?: boolean;
      'onDataChanged'?: (event: CustomEvent<any>) => void;
      'onFieldFetchData'?: (event: CustomEvent<IFormSearch>) => void;
      'onSave'?: (event: CustomEvent<any>) => void;
      'showRecap'?: boolean;
      'showSave'?: boolean;
      'showTabs'?: boolean;
      'slides'?: Array<ISlide>;
      'suffix'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormFormula {
      'asyncValidators': Array<AsyncValidator<number>>;
      'isValid': () => boolean;
      'placeholder': string;
      'readonly': boolean;
      'required': boolean;
      'type': string;
      'validators': Array<Validator<number> | ValidatorEntry>;
      'value': number;
    }
  }

  interface HTMLYooFormFormulaElement extends StencilComponents.YooFormFormula, HTMLStencilElement {}

  var HTMLYooFormFormulaElement: {
    prototype: HTMLYooFormFormulaElement;
    new (): HTMLYooFormFormulaElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-formula': HTMLYooFormFormulaElement;
  }
  interface ElementTagNameMap {
    'yoo-form-formula': HTMLYooFormFormulaElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-formula': JSXElements.YooFormFormulaAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormFormulaAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<number>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'readonly'?: boolean;
      'required'?: boolean;
      'type'?: string;
      'validators'?: Array<Validator<number> | ValidatorEntry>;
      'value'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputContainer {
      'comments': string;
      'field': IFormField;
      'readonly': boolean;
    }
  }

  interface HTMLYooFormInputContainerElement extends StencilComponents.YooFormInputContainer, HTMLStencilElement {}

  var HTMLYooFormInputContainerElement: {
    prototype: HTMLYooFormInputContainerElement;
    new (): HTMLYooFormInputContainerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-container': HTMLYooFormInputContainerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-container': HTMLYooFormInputContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-container': JSXElements.YooFormInputContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputContainerAttributes extends HTMLAttributes {
      'comments'?: string;
      'field'?: IFormField;
      'onCommented'?: (event: CustomEvent<string>) => void;
      'readonly'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputGame {
      'fieldId': string;
      'name': string;
      'phaser': any;
    }
  }

  interface HTMLYooFormInputGameElement extends StencilComponents.YooFormInputGame, HTMLStencilElement {}

  var HTMLYooFormInputGameElement: {
    prototype: HTMLYooFormInputGameElement;
    new (): HTMLYooFormInputGameElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-game': HTMLYooFormInputGameElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-game': HTMLYooFormInputGameElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-game': JSXElements.YooFormInputGameAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputGameAttributes extends HTMLAttributes {
      'fieldId'?: string;
      'name'?: string;
      'onGameOver'?: (event: CustomEvent<boolean>) => void;
      'phaser'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputValidated {
      'asyncValidate': () => Promise<boolean>;
      'asyncValidators': Array<AsyncValidator<string>>;
      'validate': () => boolean;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string;
    }
  }

  interface HTMLYooFormInputValidatedElement extends StencilComponents.YooFormInputValidated, HTMLStencilElement {}

  var HTMLYooFormInputValidatedElement: {
    prototype: HTMLYooFormInputValidatedElement;
    new (): HTMLYooFormInputValidatedElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-validated': HTMLYooFormInputValidatedElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-validated': HTMLYooFormInputValidatedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-validated': JSXElements.YooFormInputValidatedAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputValidatedAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'onChanged'?: (event: CustomEvent<string>) => void;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInput {
      'asyncValidators': Array<AsyncValidator<string>>;
      'iconPrefix': string;
      'iconSuffix': string;
      'isValid': () => boolean;
      'max': any;
      'min': any;
      'placeholder': string;
      'placeholdertolabel': boolean;
      'readonly': boolean;
      'required': boolean;
      'showInputClear': boolean;
      'showPasswordToggle': boolean;
      'tooltip': string;
      'type': string;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string | number;
    }
  }

  interface HTMLYooFormInputElement extends StencilComponents.YooFormInput, HTMLStencilElement {}

  var HTMLYooFormInputElement: {
    prototype: HTMLYooFormInputElement;
    new (): HTMLYooFormInputElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input': HTMLYooFormInputElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input': HTMLYooFormInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input': JSXElements.YooFormInputAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'iconPrefix'?: string;
      'iconSuffix'?: string;
      'max'?: any;
      'min'?: any;
      'onEnterPressed'?: (event: CustomEvent<boolean>) => void;
      'onIconClicked'?: (event: CustomEvent<string>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'placeholdertolabel'?: boolean;
      'readonly'?: boolean;
      'required'?: boolean;
      'showInputClear'?: boolean;
      'showPasswordToggle'?: boolean;
      'tooltip'?: string;
      'type'?: string;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string | number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormPhotoViewDialog {
      'allowAnnotate': boolean;
      'edit': any;
      'imageRecognitionResults': Array<{ title: string; value: any; color: string; hidden?: boolean; }>;
      'isStitch': boolean;
      'label': string;
      'preview': any;
    }
  }

  interface HTMLYooFormPhotoViewDialogElement extends StencilComponents.YooFormPhotoViewDialog, HTMLStencilElement {}

  var HTMLYooFormPhotoViewDialogElement: {
    prototype: HTMLYooFormPhotoViewDialogElement;
    new (): HTMLYooFormPhotoViewDialogElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-photo-view-dialog': HTMLYooFormPhotoViewDialogElement;
  }
  interface ElementTagNameMap {
    'yoo-form-photo-view-dialog': HTMLYooFormPhotoViewDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-photo-view-dialog': JSXElements.YooFormPhotoViewDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormPhotoViewDialogAttributes extends HTMLAttributes {
      'allowAnnotate'?: boolean;
      'edit'?: any;
      'imageRecognitionResults'?: Array<{ title: string; value: any; color: string; hidden?: boolean; }>;
      'isStitch'?: boolean;
      'label'?: string;
      'preview'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormPhotoWebcamDialog {
      'device': any;
    }
  }

  interface HTMLYooFormPhotoWebcamDialogElement extends StencilComponents.YooFormPhotoWebcamDialog, HTMLStencilElement {}

  var HTMLYooFormPhotoWebcamDialogElement: {
    prototype: HTMLYooFormPhotoWebcamDialogElement;
    new (): HTMLYooFormPhotoWebcamDialogElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-photo-webcam-dialog': HTMLYooFormPhotoWebcamDialogElement;
  }
  interface ElementTagNameMap {
    'yoo-form-photo-webcam-dialog': HTMLYooFormPhotoWebcamDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-photo-webcam-dialog': JSXElements.YooFormPhotoWebcamDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormPhotoWebcamDialogAttributes extends HTMLAttributes {
      'device'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormPhoto {
      'algorithm': IAlgorithm;
      'allowAnnotate': boolean;
      'allowLibrary': boolean;
      'asyncValidators': Array<AsyncValidator<string>>;
      'duration': number;
      'extraData': any;
      'isBackgroundProcess': boolean;
      'isImageRecognition': boolean;
      'isValid': () => boolean;
      'label': string;
      'max': number;
      'maxWidth': number;
      'min': number;
      'multiple': boolean;
      'placeholder': string;
      'processImageRecognitionResults': (retVal: any) => void;
      'readonly': boolean;
      'required': boolean;
      'saveGeoloc': boolean;
      'type': 'video' | 'audio' | 'photo';
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string | Array<string>;
    }
  }

  interface HTMLYooFormPhotoElement extends StencilComponents.YooFormPhoto, HTMLStencilElement {}

  var HTMLYooFormPhotoElement: {
    prototype: HTMLYooFormPhotoElement;
    new (): HTMLYooFormPhotoElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-photo': HTMLYooFormPhotoElement;
  }
  interface ElementTagNameMap {
    'yoo-form-photo': HTMLYooFormPhotoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-photo': JSXElements.YooFormPhotoAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormPhotoAttributes extends HTMLAttributes {
      'algorithm'?: IAlgorithm;
      'allowAnnotate'?: boolean;
      'allowLibrary'?: boolean;
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'duration'?: number;
      'extraData'?: any;
      'isBackgroundProcess'?: boolean;
      'isImageRecognition'?: boolean;
      'label'?: string;
      'max'?: number;
      'maxWidth'?: number;
      'min'?: number;
      'multiple'?: boolean;
      'onImageRecognition'?: (event: CustomEvent<any>) => void;
      'onImageSaved'?: (event: CustomEvent<IPhotoEditorData>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'readonly'?: boolean;
      'required'?: boolean;
      'saveGeoloc'?: boolean;
      'type'?: 'video' | 'audio' | 'photo';
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string | Array<string>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormProgressIndicator {
      'currentStep': number;
      'isCompleted': boolean;
      'steps': string[];
    }
  }

  interface HTMLYooFormProgressIndicatorElement extends StencilComponents.YooFormProgressIndicator, HTMLStencilElement {}

  var HTMLYooFormProgressIndicatorElement: {
    prototype: HTMLYooFormProgressIndicatorElement;
    new (): HTMLYooFormProgressIndicatorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-progress-indicator': HTMLYooFormProgressIndicatorElement;
  }
  interface ElementTagNameMap {
    'yoo-form-progress-indicator': HTMLYooFormProgressIndicatorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-progress-indicator': JSXElements.YooFormProgressIndicatorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormProgressIndicatorAttributes extends HTMLAttributes {
      'currentStep'?: number;
      'isCompleted'?: boolean;
      'onStepSelected'?: (event: CustomEvent<string>) => void;
      'steps'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRadioGroup {
      'multipleSelection': boolean;
      'values': IRadioGroupEntry[];
    }
  }

  interface HTMLYooFormRadioGroupElement extends StencilComponents.YooFormRadioGroup, HTMLStencilElement {}

  var HTMLYooFormRadioGroupElement: {
    prototype: HTMLYooFormRadioGroupElement;
    new (): HTMLYooFormRadioGroupElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-radio-group': HTMLYooFormRadioGroupElement;
  }
  interface ElementTagNameMap {
    'yoo-form-radio-group': HTMLYooFormRadioGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-radio-group': JSXElements.YooFormRadioGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRadioGroupAttributes extends HTMLAttributes {
      'multipleSelection'?: boolean;
      'onSelectionChanged'?: (event: CustomEvent<Array<IRadioGroupEntry>>) => void;
      'values'?: IRadioGroupEntry[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRadio {
      'disabled': boolean;
      'state': string;
      'text': string;
    }
  }

  interface HTMLYooFormRadioElement extends StencilComponents.YooFormRadio, HTMLStencilElement {}

  var HTMLYooFormRadioElement: {
    prototype: HTMLYooFormRadioElement;
    new (): HTMLYooFormRadioElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-radio': HTMLYooFormRadioElement;
  }
  interface ElementTagNameMap {
    'yoo-form-radio': HTMLYooFormRadioElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-radio': JSXElements.YooFormRadioAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRadioAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'onRadioClicked'?: (event: CustomEvent) => void;
      'state'?: string;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRange {
      'asyncValidators': Array<AsyncValidator<number | Array<number>>>;
      'double': boolean;
      'isValid': () => boolean;
      'max': number;
      'min': number;
      'readonly': boolean;
      'validators': Array<Validator<number | Array<number>> | ValidatorEntry>;
      'value': number | Array<number>;
    }
  }

  interface HTMLYooFormRangeElement extends StencilComponents.YooFormRange, HTMLStencilElement {}

  var HTMLYooFormRangeElement: {
    prototype: HTMLYooFormRangeElement;
    new (): HTMLYooFormRangeElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-range': HTMLYooFormRangeElement;
  }
  interface ElementTagNameMap {
    'yoo-form-range': HTMLYooFormRangeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-range': JSXElements.YooFormRangeAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRangeAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<number | Array<number>>>;
      'double'?: boolean;
      'max'?: number;
      'min'?: number;
      'onIconClicked'?: (event: CustomEvent<string>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'validators'?: Array<Validator<number | Array<number>> | ValidatorEntry>;
      'value'?: number | Array<number>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRanking {
      'values': IItemRanking[];
    }
  }

  interface HTMLYooFormRankingElement extends StencilComponents.YooFormRanking, HTMLStencilElement {}

  var HTMLYooFormRankingElement: {
    prototype: HTMLYooFormRankingElement;
    new (): HTMLYooFormRankingElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-ranking': HTMLYooFormRankingElement;
  }
  interface ElementTagNameMap {
    'yoo-form-ranking': HTMLYooFormRankingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-ranking': JSXElements.YooFormRankingAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRankingAttributes extends HTMLAttributes {
      'onChanged'?: (event: CustomEvent<IItemRanking[]>) => void;
      'values'?: IItemRanking[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRecapStep {
      'mainTitle': string;
      'stepNumber': number;
      'subTitle': string;
      'validity': boolean;
    }
  }

  interface HTMLYooFormRecapStepElement extends StencilComponents.YooFormRecapStep, HTMLStencilElement {}

  var HTMLYooFormRecapStepElement: {
    prototype: HTMLYooFormRecapStepElement;
    new (): HTMLYooFormRecapStepElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-recap-step': HTMLYooFormRecapStepElement;
  }
  interface ElementTagNameMap {
    'yoo-form-recap-step': HTMLYooFormRecapStepElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-recap-step': JSXElements.YooFormRecapStepAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRecapStepAttributes extends HTMLAttributes {
      'mainTitle'?: string;
      'stepNumber'?: number;
      'subTitle'?: string;
      'validity'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormSignaturePad {
      'asyncValidators': Array<AsyncValidator<string>>;
      'readonly': boolean;
      'required': boolean;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string;
    }
  }

  interface HTMLYooFormSignaturePadElement extends StencilComponents.YooFormSignaturePad, HTMLStencilElement {}

  var HTMLYooFormSignaturePadElement: {
    prototype: HTMLYooFormSignaturePadElement;
    new (): HTMLYooFormSignaturePadElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-signature-pad': HTMLYooFormSignaturePadElement;
  }
  interface ElementTagNameMap {
    'yoo-form-signature-pad': HTMLYooFormSignaturePadElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-signature-pad': JSXElements.YooFormSignaturePadAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormSignaturePadAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'required'?: boolean;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormSlider {
      'disabled': boolean;
      'doubleSlider': boolean;
      'hideLabel': boolean;
      'hideReferences': boolean;
      'initialLowValue': number;
      'initialValue': number;
      'maximum': number;
      'minimum': number;
      'step': number;
      'triangleColor': string;
    }
  }

  interface HTMLYooFormSliderElement extends StencilComponents.YooFormSlider, HTMLStencilElement {}

  var HTMLYooFormSliderElement: {
    prototype: HTMLYooFormSliderElement;
    new (): HTMLYooFormSliderElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-slider': HTMLYooFormSliderElement;
  }
  interface ElementTagNameMap {
    'yoo-form-slider': HTMLYooFormSliderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-slider': JSXElements.YooFormSliderAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormSliderAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'doubleSlider'?: boolean;
      'hideLabel'?: boolean;
      'hideReferences'?: boolean;
      'initialLowValue'?: number;
      'initialValue'?: number;
      'maximum'?: number;
      'minimum'?: number;
      'onDoubleSliderChanged'?: (event: CustomEvent<{ lowValue: number, highValue: number }>) => void;
      'onSingleSliderChanged'?: (event: CustomEvent<number>) => void;
      'step'?: number;
      'triangleColor'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormStarRating {
      'asyncValidators': Array<AsyncValidator<number>>;
      'readonly': boolean;
      'stars': number;
      'type': FormStarType;
      'validators': Array<Validator<number> | ValidatorEntry>;
      'value': number;
    }
  }

  interface HTMLYooFormStarRatingElement extends StencilComponents.YooFormStarRating, HTMLStencilElement {}

  var HTMLYooFormStarRatingElement: {
    prototype: HTMLYooFormStarRatingElement;
    new (): HTMLYooFormStarRatingElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-star-rating': HTMLYooFormStarRatingElement;
  }
  interface ElementTagNameMap {
    'yoo-form-star-rating': HTMLYooFormStarRatingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-star-rating': JSXElements.YooFormStarRatingAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormStarRatingAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<number>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'stars'?: number;
      'type'?: FormStarType;
      'validators'?: Array<Validator<number> | ValidatorEntry>;
      'value'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormTextArea {
      'asyncValidators': Array<AsyncValidator<string>>;
      'isValid': () => boolean;
      'placeholder': string;
      'readonly': boolean;
      'resizable': 'both' | 'vertical' | 'horizontal' | 'none';
      'setFocus': () => void;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string;
    }
  }

  interface HTMLYooFormTextAreaElement extends StencilComponents.YooFormTextArea, HTMLStencilElement {}

  var HTMLYooFormTextAreaElement: {
    prototype: HTMLYooFormTextAreaElement;
    new (): HTMLYooFormTextAreaElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-text-area': HTMLYooFormTextAreaElement;
  }
  interface ElementTagNameMap {
    'yoo-form-text-area': HTMLYooFormTextAreaElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-text-area': JSXElements.YooFormTextAreaAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormTextAreaAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'readonly'?: boolean;
      'resizable'?: 'both' | 'vertical' | 'horizontal' | 'none';
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormTextEditor {

    }
  }

  interface HTMLYooFormTextEditorElement extends StencilComponents.YooFormTextEditor, HTMLStencilElement {}

  var HTMLYooFormTextEditorElement: {
    prototype: HTMLYooFormTextEditorElement;
    new (): HTMLYooFormTextEditorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-text-editor': HTMLYooFormTextEditorElement;
  }
  interface ElementTagNameMap {
    'yoo-form-text-editor': HTMLYooFormTextEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-text-editor': JSXElements.YooFormTextEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormTextEditorAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormTimer {
      'timeChanged': (event: any, position: string) => void;
    }
  }

  interface HTMLYooFormTimerElement extends StencilComponents.YooFormTimer, HTMLStencilElement {}

  var HTMLYooFormTimerElement: {
    prototype: HTMLYooFormTimerElement;
    new (): HTMLYooFormTimerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-timer': HTMLYooFormTimerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-timer': HTMLYooFormTimerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-timer': JSXElements.YooFormTimerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormTimerAttributes extends HTMLAttributes {
      'onTimeCalculated'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormToggle {
      'asyncValidators': Array<AsyncValidator<boolean>>;
      'readonly': boolean;
      'type': FormDisplayType;
      'validators': Array<Validator<boolean> | ValidatorEntry>;
      'value': boolean;
    }
  }

  interface HTMLYooFormToggleElement extends StencilComponents.YooFormToggle, HTMLStencilElement {}

  var HTMLYooFormToggleElement: {
    prototype: HTMLYooFormToggleElement;
    new (): HTMLYooFormToggleElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-toggle': HTMLYooFormToggleElement;
  }
  interface ElementTagNameMap {
    'yoo-form-toggle': HTMLYooFormToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-toggle': JSXElements.YooFormToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormToggleAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<boolean>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'type'?: FormDisplayType;
      'validators'?: Array<Validator<boolean> | ValidatorEntry>;
      'value'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooGrid {
      'bottomActions': Array<IEntityAction>;
      'closeItemsSliding': () => void;
      'columnDefs': Array<IColumnDefinition>;
      'direction': 'vertical' | 'horizontal';
      'displayModes': Array<CardType>;
      'displayType': CardType;
      'emptyState': string;
      'entityType': EntityType;
      'headerFn': (item, index, records) => string;
      'hideFooter': boolean;
      'hideHeader': boolean;
      'icons': Array<IEntityAction>;
      'initialSelection': Array<IEntity>;
      'isLoading': boolean;
      'isLocal': boolean;
      'items': Array<IEntity>;
      'keepSelection': boolean;
      'looseCount': boolean;
      'multiple': boolean;
      'pageSize': number;
      'pullToRefresh': (refresher: any) => void;
      'secondaryActions': Array<IEntityAction>;
      'showCreate': boolean;
      'showFilters': boolean;
      'showFiltersSimple': boolean;
      'topActions': Array<IEntityAction>;
      'total': number;
      'type': 'grid' | 'card' | 'tree';
      'useTranslate': boolean;
    }
  }

  interface HTMLYooGridElement extends StencilComponents.YooGrid, HTMLStencilElement {}

  var HTMLYooGridElement: {
    prototype: HTMLYooGridElement;
    new (): HTMLYooGridElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-grid': HTMLYooGridElement;
  }
  interface ElementTagNameMap {
    'yoo-grid': HTMLYooGridElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-grid': JSXElements.YooGridAttributes;
    }
  }
  namespace JSXElements {
    export interface YooGridAttributes extends HTMLAttributes {
      'bottomActions'?: Array<IEntityAction>;
      'columnDefs'?: Array<IColumnDefinition>;
      'direction'?: 'vertical' | 'horizontal';
      'displayModes'?: Array<CardType>;
      'displayType'?: CardType;
      'emptyState'?: string;
      'entityType'?: EntityType;
      'headerFn'?: (item, index, records) => string;
      'hideFooter'?: boolean;
      'hideHeader'?: boolean;
      'icons'?: Array<IEntityAction>;
      'initialSelection'?: Array<IEntity>;
      'isLoading'?: boolean;
      'isLocal'?: boolean;
      'items'?: Array<IEntity>;
      'keepSelection'?: boolean;
      'looseCount'?: boolean;
      'multiple'?: boolean;
      'onFetchData'?: (event: CustomEvent<IGridSearch>) => void;
      'onSearchInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onSelect'?: (event: CustomEvent<Array<IEntity>>) => void;
      'pageSize'?: number;
      'secondaryActions'?: Array<IEntityAction>;
      'showCreate'?: boolean;
      'showFilters'?: boolean;
      'showFiltersSimple'?: boolean;
      'topActions'?: Array<IEntityAction>;
      'total'?: number;
      'type'?: 'grid' | 'card' | 'tree';
      'useTranslate'?: boolean;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;